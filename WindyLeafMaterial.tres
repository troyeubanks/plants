[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;

uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform float subsurface_scattering_strength : hint_range(0,1);
uniform vec4 transmission : hint_color;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform vec4 color_top: hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 color_base: hint_color = vec4(0.0, 0.0, 0.0, 1.0);

uniform float deg_sway_pitch = 80.0f;
uniform float deg_sway_yaw = 45.0f;

uniform float wind_scale = 4.0;
uniform float wind_speed = 1.0;
uniform vec3 wind_direction = vec3(0.0, 0.0, -1.0);

varying float wind;

const vec3 UP = vec3(0.0, 1.0, 0.0);
const vec3 RIGHT = vec3(1.0, 0.0, 0.0);

mat3 mat3_from_axis_and_angle(float angle, vec3 axis) {
	float s = sin(angle);
	float c = cos(angle);
	float t = 1.0 - c;
	float x = axis.x;
	float y = axis.y;
	float z = axis.z;
	
	return mat3(
		vec3(t * x * x + c, t * x * y - s * z, t * x * z + s * y),
		vec3(t * x * y + s * z, t * y * y + c, t * y * z - s * x),
		vec3(t * x * z - s * y, t * y * z + s * z, t * z * z + c)
	);
}

vec2 random2(vec2 p) {
	return fract(
		sin(
			vec2(
				dot(p, vec2(127.32, 231.4)),
				dot(p, vec2(12.3, 146.3))
			)
		) * 231.23
	);
}

float worley2(vec2 p) {
	float dist = 1.0;
	vec2 i_p = floor(p);
	vec2 f_p = fract(p);
	for (int y = -1; y <= 1; y++) {
		for (int x = -1; x <= 1; x++) {
			vec2 n = vec2(float(x), float(y));
			vec2 diff = n + random2(i_p + n) - f_p;
			dist = min(dist, length(diff));
		}
	}
	return dist;
}

void vertex() {
	vec3 vertex = VERTEX;
	vec2 uv = (WORLD_MATRIX * vec4(vertex, -1.0)).xz * wind_scale;
	vec3 wind_direction_normalized = normalize(wind_direction);
	float time = TIME * wind_speed;
	uv += wind_direction_normalized.xz * time;
	wind = pow(worley2(uv), 2.0) * UV2.y;

	mat3 to_model = inverse(mat3(WORLD_MATRIX));
	vec3 wind_forward = to_model * wind_direction_normalized;
	vec3 wind_right = normalize(cross(wind_forward, UP));

	float sway_pitch = (
		(3.14159 / 180.0 * deg_sway_pitch) * 
		wind * 
		(3.14158 / 180.0 * 20.0)
	);
	float sway_yaw = (
		(3.14159 / 180.0 * deg_sway_yaw) * 
		sin(time) * wind * 
		(3.14158 / 180.0 * 30.0)
	);

	mat3 rot_right = mat3_from_axis_and_angle(sway_pitch, wind_right);
	mat3 rot_forward = mat3_from_axis_and_angle(sway_yaw, wind_forward);
	
	VERTEX = rot_right * rot_forward * vertex;
	COLOR = mix(color_base, color_top, UV2.y);
}

void fragment() {
	vec2 base_uv = UV;
	
	ROUGHNESS = roughness;
	SPECULAR = specular;
	SSS_STRENGTH = subsurface_scattering_strength;
	TRANSMISSION = transmission.rgb;
	ALBEDO = COLOR.rgb;
}
"

[resource]
shader = SubResource( 1 )
shader_param/specular = 0.6
shader_param/metallic = 0.0
shader_param/roughness = 0.8
shader_param/point_size = 1.0
shader_param/subsurface_scattering_strength = 0.8
shader_param/transmission = Color( 0.454106, 0.81, 0.2106, 1 )
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/color_top = Color( 0.117647, 0.843137, 0.180392, 1 )
shader_param/color_base = Color( 0.0627451, 0.317647, 0.113725, 1 )
shader_param/deg_sway_pitch = 80.0
shader_param/deg_sway_yaw = 45.0
shader_param/wind_scale = 2.0
shader_param/wind_speed = 1.0
shader_param/wind_direction = Vector3( 1, 0, -1 )
